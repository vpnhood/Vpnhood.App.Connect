# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Upload AAB to Google Play"
  lane :playstore do |options|
    upload_params = {
      aab: options[:aab],
      package_name: ENV['SUPPLY_PACKAGE_NAME'],
      json_key_data: ENV['PLAY_JSON_KEY'],
      track: options[:track] || 'internal',
      version_name: options[:version_name],
      version_code: options[:version_code],
      metadata_path: './fastlane/metadata/android',
      skip_upload_apk: true,
      skip_upload_screenshots: false,
      skip_upload_images: false,
      skip_upload_metadata: false,
      skip_upload_changelogs: false,
      release_status: 'completed',
      changes_not_sent_for_review: false,
      timeout: 300
    }
    
    # Only add rollout if it has a valid value
    if options[:rollout] && !options[:rollout].to_s.empty?
      upload_params[:rollout] = options[:rollout]
    end
    
    begin
      UI.message("üöÄ Uploading AAB with metadata, images, and screenshots...")
      UI.message("   versionCode=#{options[:version_code]} track=#{upload_params[:track]} rollout=#{upload_params[:rollout] || 'none'}")
      upload_to_play_store(upload_params)
      UI.success("‚úÖ Upload of AAB and metadata succeeded")
    rescue => e
      # ONLY handle version conflict errors - let ALL other errors fail naturally
      if /Version code .* has already been used/i.match?(e.message) || 
         /already been uploaded/i.match?(e.message) || 
         /apkUpgradeVersionConflict/i.match?(e.message) ||
         /apkNoUpgradePath/i.match?(e.message)
        
        UI.important("‚ö†Ô∏è  Version code #{options[:version_code]} already exists on Google Play")
        UI.important("üîÑ Updating metadata/images/screenshots for existing version...");
        
        metadata_params = upload_params.clone
        metadata_params.delete(:aab)
        metadata_params[:skip_upload_aab] = true
        metadata_params[:skip_upload_apk] = true
        metadata_params[:changes_not_sent_for_review] = true
        metadata_params[:track_promote_release_status] = metadata_params[:release_status]

        begin
          upload_to_play_store(metadata_params)
          UI.success("‚úÖ Metadata/images/screenshots updated for existing versionCode #{options[:version_code]}")
        rescue => metadata_error
          if /Unable to find the requested release on track/i.match?(metadata_error.message)
            UI.important("‚ö†Ô∏è  Release not found on track '#{metadata_params[:track]}' ‚Äì applying listing-only metadata update")
            supply_options = {
              package_name: metadata_params[:package_name],
              json_key_data: metadata_params[:json_key_data],
              metadata_path: metadata_params[:metadata_path],
              skip_upload_aab: true,
              skip_upload_apk: true,
              skip_upload_metadata: metadata_params[:skip_upload_metadata],
              skip_upload_images: metadata_params[:skip_upload_images],
              skip_upload_screenshots: metadata_params[:skip_upload_screenshots],
              skip_upload_changelogs: true,
              changes_not_sent_for_review: true,
              timeout: metadata_params[:timeout]
            }
            supply_options[:track] = metadata_params[:track] if metadata_params[:track]

            supply(**supply_options)
            UI.success("‚úÖ Store listing metadata/images/screenshots uploaded without release association (changelogs skipped)")
          else
            raise metadata_error
          end
        end
      else
        # For ALL other errors, re-raise to fail the lane immediately
        raise e
      end
    end
  end

  desc "Download universal Play-signed APK"
  lane :download_signed do |options|
    # Ensure version_code provided (Play API requires specifying to fetch generated universal apk)
    unless options[:version_code]
      UI.user_error!("version_code is required. Pass via 'fastlane android download_signed version_code:123'.")
    end
    download_universal_apk_from_google_play(
        package_name: ENV['SUPPLY_PACKAGE_NAME'],
        json_key_data: ENV['PLAY_JSON_KEY'],
        version_code: options[:version_code],
        destination: './fastlane/downloaded.apk'
    )
    UI.success("Downloaded universal APK for version code #{options[:version_code]}")
  end
end
