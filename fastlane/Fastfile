# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Upload AAB to Google Play"
  lane :playstore do |options|
    upload_params = {
        aab: options[:aab],
        package_name: ENV['SUPPLY_PACKAGE_NAME'],
        json_key_data: ENV['PLAY_JSON_KEY'],
        track: options[:track] || 'alpha',
        version_name: options[:version_name],
        version_code: options[:version_code],
        skip_upload_apk: true,
        skip_upload_screenshots: true,
        skip_upload_images: true,
        skip_upload_metadata: true,
        skip_upload_changelogs: false,
        release_status: 'completed'
    }
    
    # Only add rollout if it has a valid value
    if options[:rollout] && !options[:rollout].to_s.empty?
      upload_params[:rollout] = options[:rollout]
    end
    
    begin
      UI.message("üöÄ Uploading AAB with changelog...")
      UI.message("   versionCode=#{options[:version_code]} track=#{upload_params[:track]} rollout=#{upload_params[:rollout] || 'none'}")
      upload_to_play_store(upload_params)
      UI.success("‚úÖ Upload of AAB and changelog succeeded")
    rescue => e
      # ONLY handle version conflict errors - let ALL other errors fail naturally
      if /Version code .* has already been used/i.match?(e.message) || 
         /already been uploaded/i.match?(e.message) || 
         /apkUpgradeVersionConflict/i.match?(e.message) ||
         /apkNoUpgradePath/i.match?(e.message)
        
        UI.important("‚ö†Ô∏è  Version code #{options[:version_code]} already exists on Google Play")
        UI.important("üîÑ Updating changelog only...")
        
        # Update only changelog for existing version
        supply(
          package_name: ENV['SUPPLY_PACKAGE_NAME'],
          json_key_data: ENV['PLAY_JSON_KEY'],
          track: upload_params[:track],
          version_code: options[:version_code],
          skip_upload_aab: true,
          skip_upload_apk: true,
          skip_upload_screenshots: true,
          skip_upload_images: true,
          skip_upload_metadata: true,
          skip_upload_changelogs: false
        )
        UI.success("‚úÖ Changelog updated for existing versionCode #{options[:version_code]}")
      else
        # For ALL other errors, re-raise to fail the lane immediately
        raise e
      end
    end
  end

  desc "Publish store contents (metadata, images, screenshots) to Google Play - shared across all tracks"
  lane :publish_contents do |options|
    UI.message("üöÄ Finding the latest version code on the production track...")

    # Step 1: Fetch all active version codes from the production track
    production_versions = google_play_track_version_codes(
      package_name: ENV['SUPPLY_PACKAGE_NAME'],
      json_key_data: ENV['PLAY_JSON_KEY'],
      track: 'production'
    )

    # Step 2: Find the highest (latest) version code from the array
    latest_version_code = production_versions.max
    
    if latest_version_code.nil?
      UI.user_error!("Could not find any active version on the production track.")
    end

    UI.message("‚úÖ Found latest version code: #{latest_version_code}")
    UI.message("üöÄ Publishing store contents (metadata, images, screenshots)...")
    UI.message("   Note: Store contents are shared across all tracks")
    
    supply(
      package_name: ENV['SUPPLY_PACKAGE_NAME'],
      json_key_data: ENV['PLAY_JSON_KEY'],
      version_code: latest_version_code,
      skip_upload_aab: true,
      skip_upload_apk: true,
      skip_upload_screenshots: false,
      skip_upload_images: false,
      skip_upload_metadata: false,
      skip_upload_changelogs: true,
      sync_image_upload: true
    )
    
    UI.success("‚úÖ Store contents published successfully")
  end

  desc "Download universal Play-signed APK"
  lane :download_signed do |options|
    # Ensure version_code provided (Play API requires specifying to fetch generated universal apk)
    unless options[:version_code]
      UI.user_error!("version_code is required. Pass via 'fastlane android download_signed version_code:123'.")
    end
    download_universal_apk_from_google_play(
        package_name: ENV['SUPPLY_PACKAGE_NAME'],
        json_key_data: ENV['PLAY_JSON_KEY'],
        version_code: options[:version_code],
        destination: './fastlane/downloaded.apk'
    )
    UI.success("Downloaded universal APK for version code #{options[:version_code]}")
  end
end
